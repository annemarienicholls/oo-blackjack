import unittest
import deck

class TestNewCard(unittest.TestCase):

    def testCardInit(self):
        self.card = deck.Card('heart','A',1)
        self.assertEqual(self.card.suit, 'heart')
        self.assertEqual(self.card.rank, 'A')
        self.assertEqual(self.card.value, 1)
        self.assertFalse(self.card.dealt)
        self.assertFalse(self.card.discard)
        


class TestNewDeck(unittest.TestCase):

    def setUp(self):
        self.deck1 = deck.Deck()

    def testDeckLength(self):
        self.assertEqual(len(self.deck1.cards), 52)

    def testCardSuits(self):
        self.assertEqual(self.deck1.cards[0].suit, 'club')
        self.assertEqual(self.deck1.cards[1].suit, 'club')
        self.assertEqual(self.deck1.cards[2].suit, 'club')
        self.assertEqual(self.deck1.cards[3].suit, 'club')
        self.assertEqual(self.deck1.cards[4].suit, 'club')
        self.assertEqual(self.deck1.cards[5].suit, 'club')
        self.assertEqual(self.deck1.cards[6].suit, 'club')
        self.assertEqual(self.deck1.cards[7].suit, 'club')
        self.assertEqual(self.deck1.cards[8].suit, 'club')
        self.assertEqual(self.deck1.cards[9].suit, 'club')
        self.assertEqual(self.deck1.cards[10].suit, 'club')
        self.assertEqual(self.deck1.cards[11].suit, 'club')
        self.assertEqual(self.deck1.cards[12].suit, 'club')
        self.assertEqual(self.deck1.cards[13].suit, 'diamond')
        self.assertEqual(self.deck1.cards[14].suit, 'diamond')
        self.assertEqual(self.deck1.cards[15].suit, 'diamond')
        self.assertEqual(self.deck1.cards[16].suit, 'diamond')
        self.assertEqual(self.deck1.cards[17].suit, 'diamond')
        self.assertEqual(self.deck1.cards[18].suit, 'diamond')
        self.assertEqual(self.deck1.cards[19].suit, 'diamond')
        self.assertEqual(self.deck1.cards[20].suit, 'diamond')
        self.assertEqual(self.deck1.cards[21].suit, 'diamond')
        self.assertEqual(self.deck1.cards[22].suit, 'diamond')
        self.assertEqual(self.deck1.cards[23].suit, 'diamond')
        self.assertEqual(self.deck1.cards[24].suit, 'diamond')
        self.assertEqual(self.deck1.cards[25].suit, 'diamond')
        self.assertEqual(self.deck1.cards[26].suit, 'heart')
        self.assertEqual(self.deck1.cards[27].suit, 'heart')
        self.assertEqual(self.deck1.cards[28].suit, 'heart')
        self.assertEqual(self.deck1.cards[29].suit, 'heart')
        self.assertEqual(self.deck1.cards[30].suit, 'heart')
        self.assertEqual(self.deck1.cards[31].suit, 'heart')
        self.assertEqual(self.deck1.cards[32].suit, 'heart')
        self.assertEqual(self.deck1.cards[33].suit, 'heart')
        self.assertEqual(self.deck1.cards[34].suit, 'heart')
        self.assertEqual(self.deck1.cards[35].suit, 'heart')
        self.assertEqual(self.deck1.cards[36].suit, 'heart')
        self.assertEqual(self.deck1.cards[37].suit, 'heart')
        self.assertEqual(self.deck1.cards[38].suit, 'heart')
        self.assertEqual(self.deck1.cards[39].suit, 'spade')
        self.assertEqual(self.deck1.cards[40].suit, 'spade')
        self.assertEqual(self.deck1.cards[41].suit, 'spade')
        self.assertEqual(self.deck1.cards[42].suit, 'spade')
        self.assertEqual(self.deck1.cards[43].suit, 'spade')
        self.assertEqual(self.deck1.cards[44].suit, 'spade')
        self.assertEqual(self.deck1.cards[45].suit, 'spade')
        self.assertEqual(self.deck1.cards[46].suit, 'spade')
        self.assertEqual(self.deck1.cards[47].suit, 'spade')
        self.assertEqual(self.deck1.cards[48].suit, 'spade')
        self.assertEqual(self.deck1.cards[49].suit, 'spade')
        self.assertEqual(self.deck1.cards[50].suit, 'spade')
        self.assertEqual(self.deck1.cards[51].suit, 'spade')


    def testCardRanks(self):
        self.assertEqual(self.deck1.cards[0].rank, '2')
        self.assertEqual(self.deck1.cards[1].rank, '3')
        self.assertEqual(self.deck1.cards[2].rank, '4')
        self.assertEqual(self.deck1.cards[3].rank, '5')
        self.assertEqual(self.deck1.cards[4].rank, '6')
        self.assertEqual(self.deck1.cards[5].rank, '7')
        self.assertEqual(self.deck1.cards[6].rank, '8')
        self.assertEqual(self.deck1.cards[7].rank, '9')
        self.assertEqual(self.deck1.cards[8].rank, '10')
        self.assertEqual(self.deck1.cards[9].rank, 'J')
        self.assertEqual(self.deck1.cards[10].rank, 'Q')
        self.assertEqual(self.deck1.cards[11].rank, 'K')
        self.assertEqual(self.deck1.cards[12].rank, 'A')
        self.assertEqual(self.deck1.cards[13].rank, '2')
        self.assertEqual(self.deck1.cards[14].rank, '3')
        self.assertEqual(self.deck1.cards[15].rank, '4')
        self.assertEqual(self.deck1.cards[16].rank, '5')
        self.assertEqual(self.deck1.cards[17].rank, '6')
        self.assertEqual(self.deck1.cards[18].rank, '7')
        self.assertEqual(self.deck1.cards[19].rank, '8')
        self.assertEqual(self.deck1.cards[20].rank, '9')
        self.assertEqual(self.deck1.cards[21].rank, '10')
        self.assertEqual(self.deck1.cards[22].rank, 'J')
        self.assertEqual(self.deck1.cards[23].rank, 'Q')
        self.assertEqual(self.deck1.cards[24].rank, 'K')
        self.assertEqual(self.deck1.cards[25].rank, 'A')
        self.assertEqual(self.deck1.cards[26].rank, '2')
        self.assertEqual(self.deck1.cards[27].rank, '3')
        self.assertEqual(self.deck1.cards[28].rank, '4')
        self.assertEqual(self.deck1.cards[29].rank, '5')
        self.assertEqual(self.deck1.cards[30].rank, '6')
        self.assertEqual(self.deck1.cards[31].rank, '7')
        self.assertEqual(self.deck1.cards[32].rank, '8')
        self.assertEqual(self.deck1.cards[33].rank, '9')
        self.assertEqual(self.deck1.cards[34].rank, '10')
        self.assertEqual(self.deck1.cards[35].rank, 'J')
        self.assertEqual(self.deck1.cards[36].rank, 'Q')
        self.assertEqual(self.deck1.cards[37].rank, 'K')
        self.assertEqual(self.deck1.cards[38].rank, 'A')
        self.assertEqual(self.deck1.cards[39].rank, '2')
        self.assertEqual(self.deck1.cards[40].rank, '3')
        self.assertEqual(self.deck1.cards[41].rank, '4')
        self.assertEqual(self.deck1.cards[42].rank, '5')
        self.assertEqual(self.deck1.cards[43].rank, '6')
        self.assertEqual(self.deck1.cards[44].rank, '7')
        self.assertEqual(self.deck1.cards[45].rank, '8')
        self.assertEqual(self.deck1.cards[46].rank, '9')
        self.assertEqual(self.deck1.cards[47].rank, '10')
        self.assertEqual(self.deck1.cards[48].rank, 'J')
        self.assertEqual(self.deck1.cards[49].rank, 'Q')
        self.assertEqual(self.deck1.cards[50].rank, 'K')
        self.assertEqual(self.deck1.cards[51].rank, 'A')


    def testCardValues(self):
        self.assertEqual(self.deck1.cards[0].value, 2)
        self.assertEqual(self.deck1.cards[1].value, 3)
        self.assertEqual(self.deck1.cards[2].value, 4)
        self.assertEqual(self.deck1.cards[3].value, 5)
        self.assertEqual(self.deck1.cards[4].value, 6)
        self.assertEqual(self.deck1.cards[5].value, 7)
        self.assertEqual(self.deck1.cards[6].value, 8)
        self.assertEqual(self.deck1.cards[7].value, 9)
        self.assertEqual(self.deck1.cards[8].value, 10)
        self.assertEqual(self.deck1.cards[9].value, 10)
        self.assertEqual(self.deck1.cards[10].value, 10)
        self.assertEqual(self.deck1.cards[11].value, 10)
        self.assertEqual(self.deck1.cards[12].value, 1)
        self.assertEqual(self.deck1.cards[13].value, 2)
        self.assertEqual(self.deck1.cards[14].value, 3)
        self.assertEqual(self.deck1.cards[15].value, 4)
        self.assertEqual(self.deck1.cards[16].value, 5)
        self.assertEqual(self.deck1.cards[17].value, 6)
        self.assertEqual(self.deck1.cards[18].value, 7)
        self.assertEqual(self.deck1.cards[19].value, 8)
        self.assertEqual(self.deck1.cards[20].value, 9)
        self.assertEqual(self.deck1.cards[21].value, 10)
        self.assertEqual(self.deck1.cards[22].value, 10)
        self.assertEqual(self.deck1.cards[23].value, 10)
        self.assertEqual(self.deck1.cards[24].value, 10)
        self.assertEqual(self.deck1.cards[25].value, 1)
        self.assertEqual(self.deck1.cards[26].value, 2)
        self.assertEqual(self.deck1.cards[27].value, 3)
        self.assertEqual(self.deck1.cards[28].value, 4)
        self.assertEqual(self.deck1.cards[29].value, 5)
        self.assertEqual(self.deck1.cards[30].value, 6)
        self.assertEqual(self.deck1.cards[31].value, 7)
        self.assertEqual(self.deck1.cards[32].value, 8)
        self.assertEqual(self.deck1.cards[33].value, 9)
        self.assertEqual(self.deck1.cards[34].value, 10)
        self.assertEqual(self.deck1.cards[35].value, 10)
        self.assertEqual(self.deck1.cards[36].value, 10)
        self.assertEqual(self.deck1.cards[37].value, 10)
        self.assertEqual(self.deck1.cards[38].value, 1)
        self.assertEqual(self.deck1.cards[39].value, 2)
        self.assertEqual(self.deck1.cards[40].value, 3)
        self.assertEqual(self.deck1.cards[41].value, 4)
        self.assertEqual(self.deck1.cards[42].value, 5)
        self.assertEqual(self.deck1.cards[43].value, 6)
        self.assertEqual(self.deck1.cards[44].value, 7)
        self.assertEqual(self.deck1.cards[45].value, 8)
        self.assertEqual(self.deck1.cards[46].value, 9)
        self.assertEqual(self.deck1.cards[47].value, 10)
        self.assertEqual(self.deck1.cards[48].value, 10)
        self.assertEqual(self.deck1.cards[49].value, 10)
        self.assertEqual(self.deck1.cards[50].value, 10)
        self.assertEqual(self.deck1.cards[51].value, 1)


    def testCardDeal(self):
        self.assertEqual(self.deck1.dealtCardCount, 0)
        self.deck1.deal()
        self.assertEqual(self.deck1.dealtCardCount, 1)
        self.assertTrue(self.deck1.cards[0].dealt)
        self.deck1.deal()
        self.assertEqual(self.deck1.dealtCardCount, 2)
        self.assertTrue(self.deck1.cards[1].dealt)
        # TODO add more, and test for exception when all 52 cards dealt and attempt to deal again

if __name__ == '__main__':
    unittest.main()

    # test deck constructor - creates 52 card objects
    # with correct suits and ranks
    # 1 test card constructor - passes suit, rank & value
